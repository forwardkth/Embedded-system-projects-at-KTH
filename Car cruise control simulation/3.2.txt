#include <stdio.h>
#include "system.h"
#include "includes.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"
#include "sys/alt_alarm.h"
#include "LCD.h"

#define DEBUG 1

#define HW_TIMER_PERIOD 100 /* 100ms */

/* Button Patterns */
#define GAS_PEDAL_FLAG      0x08
#define BRAKE_PEDAL_FLAG    0x04
#define CRUISE_CONTROL_FLAG 0x02

/* Switch Patterns */
#define TOP_GEAR_FLAG       0x00000002
#define ENGINE_FLAG         0x00000001

/* LED Patterns */
#define LED_RED_0 0x00000001 // Engine
#define LED_RED_1 0x00000002 // Top Gear

#define LED_GREEN_0 0x0001 // Cruise Control activated
#define LED_GREEN_2 0x0002 // Cruise Control Button
#define LED_GREEN_4 0x0010 // Brake Pedal
#define LED_GREEN_6 0x0040 // Gas Pedal

/*
 * Definition of Tasks
 */
#define TASK_STACKSIZE 2048

OS_STK StartTask_Stack[TASK_STACKSIZE]; 
OS_STK ControlTask_Stack[TASK_STACKSIZE]; 
OS_STK VehicleTask_Stack[TASK_STACKSIZE];

// Task Priorities
#define STARTTASK_PRIO     5
#define VEHICLETASK_PRIO  14
#define CONTROLTASK_PRIO  16

// Task Periods
#define CONTROL_PERIOD  250
#define VEHICLE_PERIOD  250

/*
 * Definition of Kernel Objects 
 */
// Mailboxes
OS_EVENT *Mbox_Throttle;
OS_EVENT *Mbox_Velocity;

// Semaphores
OS_EVENT *Sem_vehicle;
OS_EVENT *Sem_control;

// SW-Timer
OS_TMR  *Vehicle_softTmr;
OS_TMR  *Control_softTmr;

/*
 * Types
 */
enum active {on, off};

enum active gas_pedal = off;
enum active brake_pedal = off;
enum active top_gear = off;
enum active engine = off;
enum active cruise_control = off; 

/*
 * Global variables
 */
int delay; // Delay of HW-timer 
INT16U led_green = 0; // Green LEDs
INT32U led_red = 0;   // Red LEDs
INT8U disp_velocity = 0; //velocity to show on seven segment display

int buttons_pressed(void)
{
  return ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_PIO_BASE);    
}

int switches_pressed(void)
{
  return IORD_ALTERA_AVALON_PIO_DATA(SWITCH_PIO_BASE);    
}

/*
 * ISR for HW Timer
 */
alt_u32 alarm_handler(void* context)
{
  OSTmrSignal(); /* Signals a 'tick' to the SW timers */    //??? update the timer
  
  return delay;                 //next time to call the alarm_handler function. form a periodic call.
}

void Vehicle_releaseSem()           //callback function of OSTmrCreate
{
    OSSemPost(Sem_vehicle);
}

void Control_releaseSem()           //callback function of OSTmrCreate
{
    OSSemPost(Sem_control);
}


/*
 * output current velocity on the seven segement display
 */
void show_number_on_sevenseg(void)
{
  IOWR_ALTERA_AVALON_PIO_DATA(SEG7_DISPLAY_BASE, disp_velocity);
}

/*
 * show the current velocity on the seven segment display
 */
void show_velocity_on_sevenseg(INT8U velocity)
{
  disp_velocity = disp_velocity & (0<<4) & 0;                     //??
  INT8U high_bcd = velocity / 10;
  INT8U low_bcd = velocity - high_bcd * 10;
  
  disp_velocity = disp_velocity | (high_bcd << 4) | low_bcd;
  show_number_on_sevenseg();
}

/*
 * shows the target velocity on the seven segment display (HEX5, HEX4)
 * when the cruise control is activated (0 otherwise)
 */
void show_target_velocity(INT16S target_vel)
{
}

/*
 * indicates the position of the vehicle on the track with the four leftmost red LEDs
 * LEDR17: [0m, 400m)
 * LEDR16: [400m, 800m)
 * LEDR15: [800m, 1200m)
 * LEDR14: [1200m, 1600m)
 * LEDR13: [1600m, 2000m)
 * LEDR12: [2000m, 2400m]
 */
void show_position(INT16U position)
{
}

/*
 * The function 'adjust_position()' adjusts the position depending on the
 * acceleration and velocity.
 */
 INT16U adjust_position(INT16U position, INT16S velocity,
                        INT8S acceleration, INT16U time_interval)
{
  INT16S new_position = position + velocity * time_interval / 1000   //divided by 1000 to change time_intervalfrom ms to s. 
    + acceleration / 2  * (time_interval / 1000) * (time_interval / 1000);

  if (new_position > 24000) {
    new_position -= 24000;
  }
  
  show_position(new_position);
  return new_position;
}
 
/*
 * The function 'adjust_velocity()' adjusts the velocity depending on the
 * acceleration.
 */
INT16S adjust_velocity(INT16S velocity, INT8S acceleration,  
               enum active brake_pedal, INT16U time_interval)
{
  INT16S new_velocity;
  INT8U brake_retardation = 200;

  if (brake_pedal == off)
    new_velocity = velocity  + (float) (acceleration * time_interval) / 1000.0;
  else {
    if (brake_retardation * time_interval / 1000 > velocity)
      new_velocity = 0;
    else
      new_velocity = velocity - brake_retardation * time_interval / 1000;
  }
  
  return new_velocity;
}

/*
 * The task 'VehicleTask' updates the current velocity of the vehicle
 */
void VehicleTask(void* pdata)
{ 
  INT8U err,perr;  
  void* msg;
  INT8U* throttle; 
  *throttle = 0;
  INT8S acceleration;  /* Value between 40 and -20 (4.0 m/s^2 and -2.0 m/s^2) */
  INT8S retardation;   /* Value between 20 and -10 (2.0 m/s^2 and -1.0 m/s^2) */
  INT16U position = 0; /* Value between 0 and 20000 (0.0 m and 2000.0 m)  */
  INT16S velocity = 0; /* Value between -200 and 700 (-20.0 m/s amd 70.0 m/s) */
  INT16S wind_factor;   /* Value between -10 and 20 (2.0 m/s^2 and -1.0 m/s^2) */

  printf("Vehicle task created!\n");

  while(1)
    {
      err = OSMboxPost(Mbox_Velocity, (void *) &velocity);  //send velocity value to the velocity mailbox,which
                                                            //is received by control task
      
      //OSTimeDlyHMSM(0,0,0,VEHICLE_PERIOD); 
      OSSemPend(Sem_vehicle, 0, &perr);
      
      /* Non-blocking read of mailbox:  because wait time is set to 1.
       - message in mailbox: update throttle
       - no message:         use old throttle
      */
      msg = OSMboxPend(Mbox_Throttle, 1, &err);    //receive throttle value from the throttle mailbox,which 
                                                   //sended by control task.
      if (err == OS_NO_ERR) 
    throttle = (INT8U*) msg;

      /* Retardation : Factor of Terrain and Wind Resistance */
      if (velocity > 0)
    wind_factor = velocity * velocity / 10000 + 1;
      else 
    wind_factor = (-1) * velocity * velocity / 10000 + 1;

      if (position < 4000) 
        retardation = wind_factor; // even ground
      else
        if (position < 8000)
          retardation = wind_factor + 15; // traveling uphill
        else 
          if (position < 12000)
            retardation = wind_factor + 25; // traveling steep uphill
          else
            if (position < 16000)
              retardation = wind_factor; // even ground
            else
              if (position < 20000)
                retardation = wind_factor - 10; //traveling downhill
              else
                retardation = wind_factor - 5 ; // traveling steep downhill

      acceleration = *throttle / 2 - retardation;     
      position = adjust_position(position, velocity, acceleration, 200); 
      velocity = adjust_velocity(velocity, acceleration, brake_pedal, 200); 
      printf("Position: %dm\n", position / 10);
      printf("Velocity: %4.1fm/s\n", velocity /10.0);
      printf("Throttle: %dV\n", *throttle / 10);
      show_velocity_on_sevenseg((INT8U) (velocity / 10));
    }
} 
 
/*
 * The task 'ControlTask' is the main task of the application. It reacts
 * on sensors and generates responses.
 */

void ControlTask(void* pdata)
{
  INT8U err,perr;
  INT8U throttle = 40; /* Value between 0 and 80, which is interpreted as between 0.0V and 8.0V */
  void* msg;
  INT16S* current_velocity;

  printf("Control Task created!\n");

  while(1)
    {
      msg = OSMboxPend(Mbox_Velocity, 0, &err);    //receive velocity from mail box
      current_velocity = (INT16S*) msg;
      
      err = OSMboxPost(Mbox_Throttle, (void *) &throttle);         //send throttle to mail box

      //OSTimeDlyHMSM(0,0,0, CONTROL_PERIOD);                        //delay itself by control_period
      OSSemPend(Sem_control, 0, &perr);
    }
}


/* 
 * The task 'StartTask' creates all other tasks kernel objects and
 * deletes itself afterwards.
 */ 

void StartTask(void* pdata)
{
  INT8U err,perr;
  void* context;
  BOOLEAN  status; 
  
  static alt_alarm alarm;     /* Is needed for timer ISR function */
  
  /* Base resolution for SW timer : HW_TIMER_PERIOD ms */
  delay = alt_ticks_per_second() * HW_TIMER_PERIOD / 1000;   //the number of ticks per 100ms
  printf("delay in ticks %d\n", delay);

  /* 
   * Create Hardware Timer with a period of 'delay' 
   */
  if (alt_alarm_start (&alarm,
      delay,
      alarm_handler,                      //The function alarm_handler is called after delay have elapsed.
      context) < 0)
      {
          printf("No system clock available!n");
      }

  /* 
   * Create and start Software Timer 
   */
  Vehicle_softTmr = OSTmrCreate(0,  
                                VEHICLE_PERIOD/100, //2.5,
                                OS_TMR_OPT_PERIODIC,  
                                Vehicle_releaseSem, 
                                (void *)0, 
                                "Vehicle", 
                                &err); 
        if (err == OS_ERR_NONE) { 
            printf("software timer of task Vehicle generated!\n");
            status =OSTmrStart(Vehicle_softTmr, &perr);/* start the timer */
            if (perr == OS_ERR_NONE) 
            { 
                printf("software timer of task Vehicle started!\n");                          /* Timer was started */ 
            } 
        }

  Control_softTmr = OSTmrCreate(0,  
                                CONTROL_PERIOD/100, //2.5,
                                OS_TMR_OPT_PERIODIC,  
                                Control_releaseSem, 
                                (void *)0, 
                                "Control", 
                                &err); 
        if (err == OS_ERR_NONE) { 
            printf("software timer of task Control generated!\n");
            status =OSTmrStart(Control_softTmr, &perr);/* start the timer */
            if (perr == OS_ERR_NONE) 
            { 
                printf("software timer of task Control started!\n");                          /* Timer was started */ 
            }  
        }
        

  /*
   * Creation of Kernel Objects
   */
  // Mailboxes
  Mbox_Throttle = OSMboxCreate((void*) 0); /* Empty Mailbox - Throttle */
  Mbox_Velocity = OSMboxCreate((void*) 0); /* Empty Mailbox - Velocity */

  /*
   * Create statistics task
   */
  OSStatInit();

  /* 
   * Creating Tasks in the system 
   */
  err = OSTaskCreateExt(
       ControlTask, // Pointer to task code
       NULL,        // Pointer to argument that is
                    // passed to task
       &ControlTask_Stack[TASK_STACKSIZE-1], // Pointer to top
                             // of task stack
       CONTROLTASK_PRIO,
       CONTROLTASK_PRIO,
       (void *)&ControlTask_Stack[0],
       TASK_STACKSIZE,
       (void *) 0,
       OS_TASK_OPT_STK_CHK);

  err = OSTaskCreateExt(
       VehicleTask, // Pointer to task code
       NULL,        // Pointer to argument that is
                    // passed to task
       &VehicleTask_Stack[TASK_STACKSIZE-1], // Pointer to top
                             // of task stack
       VEHICLETASK_PRIO,
       VEHICLETASK_PRIO,
       (void *)&VehicleTask_Stack[0],
       TASK_STACKSIZE,
       (void *) 0,
       OS_TASK_OPT_STK_CHK);
  
  printf("All Tasks and Kernel Objects generated!\n");

  /* Task deletes itself */

  OSTaskDel(OS_PRIO_SELF);
}

/*
 *
 * The function 'main' creates only a single task 'StartTask' and starts
 * the OS. All other tasks are started from the task 'StartTask'.
 *
 */

int main(void) {
  printf("Lab: Cruise Control\n");

  LCD_Init();
  LCD_WriteLine1("Laboratory 1");
  LCD_WriteLine2("Cruise Control");
  
  Sem_vehicle=OSSemCreate(0);
  Sem_control=OSSemCreate(0);        //initiate semaphore
  
  OSTaskCreateExt(
     StartTask, // Pointer to task code
         NULL,      // Pointer to argument that is
                    // passed to task
         (void *)&StartTask_Stack[TASK_STACKSIZE-1], // Pointer to top
                             // of task stack 
         STARTTASK_PRIO,
         STARTTASK_PRIO,
         (void *)&StartTask_Stack[0],
         TASK_STACKSIZE,
         (void *) 0,  
         OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);
         
  OSStart();
  
  return 0;
}
